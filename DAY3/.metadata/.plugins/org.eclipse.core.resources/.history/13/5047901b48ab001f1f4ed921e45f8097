
public class SinglyLinearLinked {
	    static class Node {
	        int data;
	        Node next;

	        Node(int data) {
	            this.data = data;
	            this.next = null;
	        }
	    }

	    private Node head; // Pointer to the first node
	    private Node tail; // Pointer to the last node
	    private int size;  // Tracks the number of nodes in the list

	    public SinglyLinkedList() {
	        head = null;
	        tail = null;
	        size = 0;
	    }

	    // Check if the list is empty
	    public boolean isEmpty() {
	        return head == null;
	    }

	    // Add a node at the end of the list
	    public void addLast(int data) {
	        Node newNode = new Node(data);
	        if (isEmpty()) {
	            head = newNode;
	            tail = newNode;
	        } else {
	            tail.next = newNode;
	            tail = newNode;
	        }
	        size++;
	    }

	    // Add a node at the beginning of the list
	    public void addFirst(int data) {
	        Node newNode = new Node(data);
	        if (isEmpty()) {
	            head = newNode;
	            tail = newNode;
	        } else {
	            newNode.next = head;
	            head = newNode;
	        }
	        size++;
	    }

	    // Insert a new data after a given data
	    public void insertAfter(int target, int data) {
	        if (isEmpty()) {
	            System.out.println("List is empty.");
	            return;
	        }

	        Node current = head;
	        while (current != null && current.data != target) {
	            current = current.next;
	        }

	        if (current == null) {
	            System.out.println("Target data not found.");
	        } else {
	            Node newNode = new Node(data);
	            newNode.next = current.next;
	            current.next = newNode;

	            // Update tail if the new node is added at the end
	            if (current == tail) {
	                tail = newNode;
	            }
	            size++;
	        }
	    }

	    // Insert a new data before a given data
	    public void insertBefore(int target, int data) {
	        if (isEmpty()) {
	            System.out.println("List is empty.");
	            return;
	        }

	        // If the target is the head
	        if (head.data == target) {
	            addFirst(data);
	            return;
	        }

	        Node current = head;
	        Node previous = null;

	        // Traverse the list to find the target node
	        while (current != null && current.data != target) {
	            previous = current;
	            current = current.next;
	        }

	        if (current == null) {
	            System.out.println("Target data not found.");
	        } else {
	            Node newNode = new Node(data);
	            newNode.next = current;
	            previous.next = newNode;
	            size++;
	        }
	    }

	    // Display the list
	    public void display() {
	        if (isEmpty()) {
	            System.out.println("List is empty.");
	            return;
	        }

	        Node current = head;
	        while (current != null) {
	            System.out.print(current.data + " -> ");
	            current = current.next;
	        }
	        System.out.println("null");
	    }

	    // Get the size of the list
	    public int size() {
	        return size;
	    }
	}

}
